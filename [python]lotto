import random

#KONCEPT - losowanie lotto - gracz podaje 6 liczb z 49 i program ma losowac az nie uda sie trafic.

#funkcja podawania - przenosi liste do nastepnej funkcji..
#funkcja losowania - bierze podane liczby plus ma swoje - przenosi losowane liczby i podane dalej...
#funkcja wyswietlania - wyswietla podane i wylosowane liczby



#Podanie liczb przez gracza
def podanieliczb():
    ileliczb = 5
    maksliczba = 49
    typy_gracza = []
    i = 0
    print("Podaj 6 liczb z 49 do losowania Lotto!")
    while i <= ileliczb:
        typ = eval(input("Podaj liczbe: "))
        if 0 < typ <= maksliczba and typ not in typy_gracza:
            typy_gracza.append(typ)
            i = i + 1  # update counter
    print("func_podanieliczb DEBUG: Twoja typy to: ", typy_gracza)
    losowanie(typy_gracza)
    #odpalamy funkcje losowania i przenosimy sobie tablice z liczbami wytypowanymi przez gracza dalej...


#losujemy liczby - losowanie
def losowanie (typy_gracza):
    ileliczb = 5
    maksliczba = 49
    wyniki_losowania = []
    i = 0
    while i < ileliczb:
         liczba = random.randint(1, maksliczba)
         if wyniki_losowania.count(liczba) == 0:
            wyniki_losowania.append(liczba)
            i = i + 1
    print("func_losowanie DEBUG: Twoja typy to: ", typy_gracza)
    print("func_losowanie DEBUG: Wyniki losowania to: ", wyniki_losowania)
    #odpalamy sobie sortowanie tablic ...
    sortowanie(wyniki_losowania,typy_gracza)



#sortowanie
def sortowanie(wyniki_losowania,typy_gracza):
    sorted_wyniki_losowania = []
    sorted_typy_gracza = []
    alist = wyniki_losowania
    quickSort(alist)
    sorted_wyniki_losowania = alist
    alist = typy_gracza
    quickSort(alist)
    sorted_typy_gracza = alist
    print("func_sortowanie DEBUG: Wyniki losowania SORTED to: ", sorted_wyniki_losowania)
    print("func_sortowanie DEBUG: Typy gracza SORTED to: ", sorted_typy_gracza)
    porownanie_wynikow(sorted_wyniki_losowania,sorted_typy_gracza)

#porownujemy wyniki
def porownanie_wynikow(sorted_wyniki_losowanie,sorted_typy_gracza):
    print("Porownajmy wyniki losania!")
    ilosclosowan = 0
    if sorted_wyniki_losowanie != sorted_typy_gracza:
        print("Wylosowane liczby:", sorted_wyniki_losowanie)
        print("Podane liczby:", sorted_typy_gracza)
        print("Nietrafione losowanie!")
        #tu sie doda jeszcze licznik losowan nieudanych
        ilosclosowan=ilosclosowan+1
        print("Ilosc losowan wykonanych (jedno losowanie na dzien):", ilosclosowan)
        nowe_losowanie(sorted_typy_gracza)

    else:
        print("Wylosowane liczby:", sorted_wyniki_losowanie)
        print("Podane liczby:", sorted_typy_gracza)
        print("Trafione!")
        exit()


def nowe_losowanie (sorted_typy_gracza):
    print("Podane liczby:", sorted_typy_gracza)
    print("NOWE LOSOWANIE!")
    typy_gracza=sorted_typy_gracza
    print("func_nowelosowanie DEBUG: Typy gracza to: ", typy_gracza)
    #losowanie(typy_gracza)


def wyniki_debug(typy_gracza,wyniki_losowania):
    print("Wylosowane liczby:", typy_gracza)
    print("Podane liczby:", wyniki_losowanie)

def podanie_debug(typy_gracza):
    print("Wylosowane liczby:", typy_gracza)


#quicksort modules BEGIN

def quickSort(alist):
   quickSortHelper(alist,0,len(alist)-1)

def quickSortHelper(alist,first,last):
   if first<last:

       splitpoint = partition(alist,first,last)

       quickSortHelper(alist,first,splitpoint-1)
       quickSortHelper(alist,splitpoint+1,last)


def partition(alist,first,last):
   pivotvalue = alist[first]

   leftmark = first+1
   rightmark = last

   done = False
   while not done:

       while leftmark <= rightmark and alist[leftmark] <= pivotvalue:
           leftmark = leftmark + 1

       while alist[rightmark] >= pivotvalue and rightmark >= leftmark:
           rightmark = rightmark -1

       if rightmark < leftmark:
           done = True
       else:
           temp = alist[leftmark]
           alist[leftmark] = alist[rightmark]
           alist[rightmark] = temp

   temp = alist[first]
   alist[first] = alist[rightmark]
   alist[rightmark] = temp


   return rightmark

#quicksort modules END




#Main - i tyle ;p
def main ():
    podanieliczb()
main()
